import * as React from "react";
import handleViewport from "react-in-viewport";
import { reaktiveringLenke, dialogLenke } from "../../innhold/lenker";
import { loggAktivitet } from "../../metrics/metrics";
import { useAmplitudeData } from "../../contexts/amplitude-context";
import { useAutentiseringData, InnloggingsNiva } from "../../contexts/autentisering";
import { OppfolgingContext } from "../../contexts/oppfolging";
import { BodyShort, Button, Link } from "@navikt/ds-react";

interface ViewportProps {
  inViewport: boolean;
  forwardedRef: React.ForwardedRef<any>;
}

type Props = {
  setReaktivering: (reaktivering: any) => void;
};

const ReaktiveringMelding = (props: Props & ViewportProps) => {
  const amplitudeData = useAmplitudeData();
  const { kanReaktiveres } = React.useContext(OppfolgingContext).data;
  const { level } = useAutentiseringData();

  const [harVistTilBruker, setHarVistTilBruker] = React.useState<boolean>(false);

  const { setReaktivering } = props;
  const isLevel4 = level === InnloggingsNiva.LEVEL_4;
  const kanViseKomponent = isLevel4 && kanReaktiveres;

  if (props.inViewport && !harVistTilBruker) {
    setHarVistTilBruker(true);
  }

  const handleReaktivering = (event: React.SyntheticEvent) => {
    event.preventDefault();
    loggAktivitet({ aktivitet: "Går til reaktivering", ...amplitudeData });
    window.location.assign(reaktiveringLenke);
  };

  const handleDialog = (event: React.SyntheticEvent) => {
    event.preventDefault();
    loggAktivitet({ aktivitet: "Går til dialog fra reaktiveringskortet", ...amplitudeData });
    window.location.assign(dialogLenke);
  };

  const handleIkkeReaktivering = (event: React.SyntheticEvent) => {
    event.preventDefault();
    loggAktivitet({ aktivitet: "Velger ikke vis reaktivering", ...amplitudeData });
    setTimeout(() => {
      setReaktivering({
        updated: new Date(),
        state: false,
      });
    }, 500);
  };

  if (!kanViseKomponent) {
    return null;
  }
  return (
    <div ref={props.forwardedRef}>
      <BodyShort className="blokk-xs">
        Har du mottatt dagpenger vil utbetalingene nå være stoppet. Du må registrere deg på nytt og sende inn ny søknad
        om dagpenger.
      </BodyShort>
      <BodyShort className="blokk-xs">
        Dersom du har søkt eller ønsker å søke om dagpenger må du være registrert som arbeidssøker.
      </BodyShort>
      <BodyShort className="blokk-xs">
        Dersom du ønsker arbeidsrettet oppfølging fra NAV, må du være registrert som arbeidssøker.
      </BodyShort>
      <BodyShort className="blokk-s">
        <Button variant="secondary" onClick={handleReaktivering}>
          Registrer deg som arbeidssøker
        </Button>
      </BodyShort>
      <BodyShort>Er du usikker på om din situasjon betyr at du bør være registrert som arbeidssøker?</BodyShort>
      <BodyShort className="blokk-xs">
        <Link href={dialogLenke} onClick={handleDialog}>
          Ta kontakt med veilederen din i dialogtjenesten
        </Link>
      </BodyShort>
      <BodyShort className="blokk-xs">
        <Link href={dialogLenke} onClick={handleIkkeReaktivering}>
          Jeg har ikke lenger behov for å være registrert som arbeidssøker hos NAV
        </Link>
      </BodyShort>
    </div>
  );
};

const ViewportBlock: React.ComponentType<Props> = handleViewport(ReaktiveringMelding);

export default ViewportBlock;
